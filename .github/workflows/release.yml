name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.3.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: il-central-1

    - name: Set release version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        fi

    - name: Validate release components
      run: |
        echo "🔍 Validating release components..."

        # Run all validation checks
        find components/ -name "*.sh" -exec shellcheck {} \;
        python3 -m py_compile components/send_email.py
        python3 -m py_compile components/dashboard-server.py
        python3 -m json.tool components/cloudwatch-agent-config.json > /dev/null

        echo "✅ All components validated for release"

    - name: Generate changelog
      run: |
        echo "📝 Generating changelog..."

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "- Complete RustDesk deployment automation" >> CHANGELOG.md
          echo "- GitHub Actions CI/CD pipeline" >> CHANGELOG.md
          echo "- Staging and production environments" >> CHANGELOG.md
          echo "- Automated component validation" >> CHANGELOG.md
        fi

        echo "" >> CHANGELOG.md
        echo "### Components Included:" >> CHANGELOG.md
        echo "- Enhanced monitoring with auto-remediation" >> CHANGELOG.md
        echo "- Web dashboard with real-time metrics" >> CHANGELOG.md
        echo "- Automated backup and restore" >> CHANGELOG.md
        echo "- Email alerting system" >> CHANGELOG.md
        echo "- CloudWatch integration" >> CHANGELOG.md
        echo "- SSL automation support" >> CHANGELOG.md

    - name: Create release package
      run: |
        echo "📦 Creating release package..."

        # Create release directory
        mkdir -p release/rustdesk-${RELEASE_VERSION}

        # Copy components
        cp -r components/ release/rustdesk-${RELEASE_VERSION}/
        cp -r bootstrap/ release/rustdesk-${RELEASE_VERSION}/
        cp -r cloudformation/ release/rustdesk-${RELEASE_VERSION}/
        cp -r docs/ release/rustdesk-${RELEASE_VERSION}/
        cp README.md release/rustdesk-${RELEASE_VERSION}/
        cp CHANGELOG.md release/rustdesk-${RELEASE_VERSION}/

        # Create installation script
        cat > release/rustdesk-${RELEASE_VERSION}/install.sh << 'EOF'
        #!/bin/bash
        echo "🚀 RustDesk Deployment Installer ${RELEASE_VERSION}"
        echo "This script will upload components to your S3 bucket."
        echo ""
        read -p "Enter your S3 bucket name: " BUCKET_NAME
        read -p "Enter AWS region: " AWS_REGION

        if [ -z "$BUCKET_NAME" ] || [ -z "$AWS_REGION" ]; then
          echo "❌ Bucket name and region are required"
          exit 1
        fi

        echo "📦 Uploading components to s3://${BUCKET_NAME}/Components/..."
        aws s3 sync components/ s3://${BUCKET_NAME}/Components/ --region ${AWS_REGION}
        aws s3 cp bootstrap/rustdesk-bootstrap-modular.sh s3://${BUCKET_NAME}/Components/ --region ${AWS_REGION}

        echo "✅ Installation complete!"
        echo "Update your CloudFormation UserData to use: s3://${BUCKET_NAME}/Components/rustdesk-bootstrap-modular.sh"
        EOF

        chmod +x release/rustdesk-${RELEASE_VERSION}/install.sh

        # Create archive
        cd release
        tar -czf rustdesk-${RELEASE_VERSION}.tar.gz rustdesk-${RELEASE_VERSION}/
        zip -r rustdesk-${RELEASE_VERSION}.zip rustdesk-${RELEASE_VERSION}/

    - name: Deploy to production S3
      run: |
        echo "🚀 Deploying ${RELEASE_VERSION} to production..."

        # Deploy to production S3
        aws s3 sync components/ s3://rustdesk-s3-bak/Components/
        aws s3 cp bootstrap/rustdesk-bootstrap-modular.sh s3://rustdesk-s3-bak/Components/
        aws s3 cp cloudformation/template-docker-enhanced.yaml s3://rustdesk-s3-bak/CloudFormation/
        aws s3 cp cloudformation/parameters-prod.json s3://rustdesk-s3-bak/CloudFormation/

        # Create versioned backup
        aws s3 sync components/ s3://rustdesk-s3-bak/Releases/${RELEASE_VERSION}/Components/

        echo "✅ Production deployment complete"

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: RustDesk Deployment ${{ env.RELEASE_VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/rustdesk-${{ env.RELEASE_VERSION }}.tar.gz
        asset_name: rustdesk-${{ env.RELEASE_VERSION }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload zip asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/rustdesk-${{ env.RELEASE_VERSION }}.zip
        asset_name: rustdesk-${{ env.RELEASE_VERSION }}.zip
        asset_content_type: application/zip

    - name: Post-release notification
      run: |
        echo "🎉 Release ${{ env.RELEASE_VERSION }} completed successfully!"
        echo "📦 Production S3: s3://rustdesk-s3-bak/Components/"
        echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_VERSION }}"
        echo "📋 Changelog: See release notes for details"